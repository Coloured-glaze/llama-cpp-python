name: Build Wheels (CUDA) Manual

permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = @('windows-latest')
              'pyver' = @("3.10")
              'cuda' = @("12.1.1") #, "12.5.1", "12.6.1")
              'releasetag' = @("basic")
          }

          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT

  build_wheels:
    name: Build Wheel ${{ matrix.os }} ${{ matrix.pyver }} ${{ matrix.cuda }} ${{ matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}
      AVXVER: ${{ matrix.releasetag }}

    steps:
      - name: Setup MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}
          cache: 'pip'

      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v3.1.0
        with:
          activate-environment: "llamacpp"
          python-version: ${{ matrix.pyver }}
          miniforge-version: latest
          add-pip-as-python-dependency: true
          auto-activate-base: false

      - name: VS Integration Cache
        id: vs-integration-cache
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ./MSBuildExtensions
          key: cuda-${{ matrix.cuda }}-vs-integration

      - name: Get Visual Studio Integration
        if: runner.os == 'Windows' && steps.vs-integration-cache.outputs.cache-hit != 'true'
        run: |
          if ($env:CUDAVER -eq '12.1.1') {
              $x = '12.1.0'
          } else {
              $x = $env:CUDAVER
          }
          
          $links = (Invoke-RestMethod 'https://raw.githubusercontent.com/Jimver/cuda-toolkit/master/src/links/windows-links.ts').Trim().split().where({$_ -ne ''})
          for ($i=$q=0; $i -lt $links.count -and $q -lt 2; $i++) {
              if ($links[$i] -eq "'$x',") {
                  $q++
              }
          }
          
          $downloadUrl = $links[$i].Trim("'")
          Write-Output "Downloading CUDA integration from: $downloadUrl"
          
          Invoke-RestMethod $downloadUrl -OutFile 'cudainstaller.zip'
          & 'C:\Program Files\7-Zip\7z.exe' e cudainstaller.zip -oMSBuildExtensions -r *\MSBuildExtensions\* > $null
          Remove-Item 'cudainstaller.zip'

      - name: Install Visual Studio Integration
        if: runner.os == 'Windows'
        run: |
          # 动态查找 Visual Studio BuildCustomizations 目录
          $vsPath = vswhere -latest -property installationPath
          if (-not $vsPath) {
              Write-Error "Visual Studio installation not found"
              exit 1
          }
          
          # 查找 BuildCustomizations 目录
          $buildCustomizations = Get-ChildItem -Path "$vsPath\MSBuild\Microsoft\VC" -Recurse -Directory -Filter "BuildCustomizations" | Select-Object -First 1
          if (-not $buildCustomizations) {
              Write-Error "BuildCustomizations directory not found in Visual Studio installation"
              exit 1
          }
          
          # 复制文件
          $sourceDir = (Get-Item '.\MSBuildExtensions').FullName
          Copy-Item "$sourceDir\*" $buildCustomizations.FullName -Force
          Write-Output "Copied CUDA integration files to: $($buildCustomizations.FullName)"
          
          # 设置 CUDA 环境变量
          $cudaMainVersion = $env:CUDAVER.Substring(0, $env:CUDAVER.LastIndexOf('.'))
          $cudaEnvVar = "CUDA_PATH_V" + $cudaMainVersion.Replace('.', '_')
          Write-Output "$cudaEnvVar=$env:CONDA_PREFIX" >> $env:GITHUB_ENV
          Write-Output "Set $cudaEnvVar=$env:CONDA_PREFIX"

      - name: Install Dependencies
        env:
          MAMBA_DOWNLOAD_FAILFAST: "0"
          MAMBA_NO_LOW_SPEED_LIMIT: "1"
        run: |
          $cudaVersion = $env:CUDAVER
          mamba install -y 'cuda' -c nvidia/label/cuda-$cudaVersion
          python -m pip install build wheel

      - name: Build Wheel
        run: |
          # 正确提取 CUDA 主版本 (12.1)
          $cudaMainVersion = $env:CUDAVER.Substring(0, $env:CUDAVER.LastIndexOf('.'))
          
          # 设置环境变量
          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX
          $env:CUDA_TOOLKIT_ROOT_DIR = $env:CONDA_PREFIX
          
          # 配置 CMAKE 参数
          $env:VERBOSE = '1'
          $env:CMAKE_ARGS = '-DGGML_CUDA=on -DCMAKE_CUDA_ARCHITECTURES=70'
          $env:CMAKE_ARGS = "-DGGML_CUDA_FORCE_MMQ=ON $env:CMAKE_ARGS"
          $env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off'
          
          # 构建 wheel
          python -m build --wheel
          
          # 保存 CUDA 版本用于后续步骤
          Write-Output "CUDA_VERSION=$cudaMainVersion" >> $env:GITHUB_ENV
          Write-Output "Using CUDA version: $cudaMainVersion for tagging"

      - uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}-cu${{ env.CUDA_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
